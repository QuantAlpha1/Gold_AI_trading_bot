Gold_AI_Trading_bot 
│                    
├── .env 
│                   
├── main.py     # Primary execution script
│   ├── SYSTEM & OS
│   │   ├── import sys
│   │   ├── import argparse
│   │   ├── from pathlib import Path
│   │   ├── import warnings
│   │   ├── import threading
│   │   ├── from threading import Lock
│   │   ├── from collections import defaultdict
│   │   ├── from dataclasses import dataclass
│   │   ├── import time
│   │   ├── import re
│   │   ╰── import copy
│   │
│   ├── LOGGING
│   │   ├── import logging
│   │   ╰── from logging.handlers import TimedRotatingFileHandler
│   │
│   ├── DATA & MATH
│   │   ├── import numpy as np
│   │   ├── import numpy.typing as npt
│   │   ├── from numpy.typing import ArrayLike, NDArray
│   │   ├── import pandas as pd
│   │   ├── import math
│   │   ╰── from decimal import Decimal, getcontext, getcontext().prec = 8
│   │
│   ├── DATETIME
│   │   ├── from datetime import datetime, timedelta
│   │   ╰── import pytz
│   │
│   ├── METATRADER
│   │   ╰── import MetaTrader5 as mt5
│   │
│   ├── MACHINE LEARNING
│   │   ├── from sklearn.preprocessing import RobustScaler
│   │   ├── from sklearn.metrics import accuracy_score
│   │   ├── from sklearn.inspection import permutation_importance
│   │   ├── from sklearn.inspection import permutation_importance
│   │   ├── from sklearn.model_selection import TimeSeriesSplit
│   │   ├── import joblib
│   │   ├── import shap
│   │   ├── from lime.lime_tabular import LimeTabularExplainer
│   │   ├── import matplotlib.pyplot as plt
│   │   ╰── from matplotlib.figure import Figure
│   │  
│   ├── REINFORCEMENT LEARNING
│   │   ├── import gymnasium as gym
│   │   ├── from gymnasium import spaces, Env
│   │   ├── from stable_baselines3 import PPO
│   │   ├── from stable_baselines3.common.env_util import make_vec_env
│   │   ├── from stable_baselines3.common.vec_env import DummyVecEnv
│   │   ├── from stable_baselines3.common.callbacks import BaseCallback
│   │   ├── from datetime import datetime, timedelta
│   │   ├── from collections import deque
│   │   ╰── import hashlib
│   │  
│   ├── STATISTICS
│   │   ╰── from statsmodels.stats.diagnostic import breaks_cusumolsresid
│   │  
│   ├── TYPING
│   │   ├── from typing import (Tuple, Dict, Callable, TypedDict, Optional, List, Any, Union, Literal, ClassVar)
│   │   ├── from typing_extensions import Annotated
│   │   ├── from typing import TYPE_CHECKING, Any
│   │   ╰── from typing_extensions import Annotated
│   │ 
│   ├── VALIDATION
│   │   ╰── from pydantic import:
│   │       ├── BaseModel
│   │       ├── Field
│   │       ├── field validator
│   │       ├── model validatior
│   │       ├── ValidationInfo
│   │       ╰── ConfigDict
│   │ 
│   ├── UTILITIES
│   │   ├── import random
│   │   ├── from functools import lru_cache
│   │   ╰── from apscheduler.schedulers.background import BackgroundScheduler
│   │ 
│   ├── def detect_clustering
│   │
│   ├── def mt5_get
│   │
│   ├── def setup_logging
│   │
│   ├── class TradingError(Exception)
│   │ 
│   ├── class RetryableError(TradingError)
│   │
│   ├── def _execute_with_retry_core
│   │
│   ├── class Config
│   │   ├── SYMBOL: str = "GOLD"
│   │   ├── ACCOUNT_BALANCE: float = Field(10000.0, gt=0)
│   │   ├── RISK_PER_TRADE: float = Field(0.02, gt=0, le=0.05)
│   │   ├── INITIAL_STOP_LOSS: float = Field(100, gt=5, le=500)
│   │   ├── INITIAL_TAKE_PROFIT: float = 150
│   │   ├── MAX_TRADES_PER_DAY: int = Field(default=20, gt=0, le=100)
│   │   ├── FEATURES: List[str] = ['open', 'high', 'low', 'close', 'real_volume']
│   │   ├── MODEL_VERSION: str = "1.0"
│   │   ├── ATR_STOP_LOSS_FACTOR: float = Field(default=1.5, gt=0.0, le=5.0)
│   │   ├── TRAILING_STOP_POINTS: int = Field(default=50, gt=0, le=500)
│   │   ├── PREPROCESSOR_PATH: Path = Path("models/preprocessor.pkl")
│   │   ├── DATA_POINTS: int = 500
│   │   ├── RL_MODEL_PATH: Path = Path("models/rl_model")
│   │   ├── MAX_DATA_BUFFER: int = 2000
│   │   ├── TRADE_PENALTY_THRESHOLD: float = -50
│   │   ├── POSITION_ADJUSTMENT_THRESHOLD: float = 100
│   │   ├── RETRAIN_INTERVAL_DAYS: int = 7
│   │   ├── MIN_RETRAIN_SAMPLES: int = 1000
│   │   ├── TIMEFRAME: int = mt5.TIMEFRAME_M1
│   │   ├── RL_PARAMS: ClassVar[Dict] =
│   │   │   ├── 'learning_rate': 3e-4,
│   │   │   ├── 'n_steps': 2048,
│   │   │   ├── 'batch_size': 64,
│   │   │   ├── 'n_epochs': 10,
│   │   │   ├── 'gamma': 0.99,
│   │   │   ├── 'gae_lambda': 0.95,
│   │   │   ├── 'clip_range': 0.2,
│   │   │   ├── 'ent_coef': 0.01,
│   │   │   ╰──  'total_timesteps': 100000
│   │   │ 
│   │   ├── model_config = 
│   │   │   ├── "arbitrary_types_allowed": True,
│   │   │   └── "validate_assignment": True
│   │   │ 
│   │   ├── @field_validator('SYMBOL')
│   │   ├── @classmethod
│   │   ├── def validate_symbol(cls, v: str) -> str:
│   │   │ 
│   │   ├── @field_validator('TIMEFRAME')
│   │   ├── @classmethod
│   │   ├── def validate_timeframe(cls, v: int) -> int:
│   │   │ 
│   │   ├── @field_validator('PREPROCESSOR_PATH', 'RL_MODEL_PATH')
│   │   ├── @classmethod
│   │   ├── def validate_paths(cls, v: Path) -> Path:
│   │   │ 
│   │   ├── @field_validator('INITIAL_STOP_LOSS')
│   │   ├── @classmethod
│   │   ├── def validate_stop_loss(cls, v: float, info: FieldValidationInfo) -> float:
│   │   │ 
│   │   ├── @model_validator(mode='after')
│   │   ├── def validate_risk_reward(self) -> 'Config':
│   │   │ 
│   │   └── def __str__(self) -> str:
│   │
│   ├── class PerformanceMonitor:
│   │   ├── def __init__(self):
│   │   ├── def _update_sharpe(self):
│   │   ├── def _update_equity_curve(self, pnl):
│   │   ├── def _update_drawdown(self):
│   │   ├── def _calc_annualized_return(self):
│   │   ├── def _calc_profit_factor(self):
│   │   ├── def get_performance_report(self):
│   │   ├── def plot_equity_curve(self):
│   │   └── def update(self, trade):
│   │ 
│   ├── class MT5Connector:
│   │   ├── def __init__(self, max_retries: int = 3, retry_delay: float = 1.0):
│   │   ├── def _ensure_connection(self) -> bool:
│   │   
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   ├── 
│   │
│   └── predictor.py
│                    
├──
├── strategies/
│   ├── scalping_engine.py       # Core strategy
│   └── ml_model/
│       ├── feature_eng.py
│       ├── model.py
│       └── predictor.py
├── utilities/
│   ├── logger.py
│   ├── analytics.py
│   ├── error_handler.py
│   └── heartbeat.py           # NEW: System health monitoring
└── tests/
    ├── unit/
    └── stress/                # NEW: Extreme scenario tests